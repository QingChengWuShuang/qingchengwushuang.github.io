[{"title":"C++ Lesson1","url":"/OI/C++%20Lesson1/","content":"<h1 id=\"C-Lesson1-结构体、文件操作\"><a href=\"#C-Lesson1-结构体、文件操作\" class=\"headerlink\" title=\"C++ Lesson1 (结构体、文件操作)\"></a>C++ Lesson1 (结构体、文件操作)</h1><span id=\"more\"></span>\n<hr>\n<p><br><br><br><br><br></p>\n<h2 id=\"Part-One-结构体\"><a href=\"#Part-One-结构体\" class=\"headerlink\" title=\"$ Part One $ :  结构体\"></a>$ Part One $ :  结构体</h2><p><br><br></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Stu</span>&#123;          <span class=\"comment\">//创建一个类型名为&quot;Stu&quot;的结构体</span></span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> mark;</span><br><span class=\"line\">    <span class=\"comment\">/* 该类型包括两个变量 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br><br></p>\n<p>在上述代码中，我们创建了一个<strong>结构类型名</strong>为Stu的结构体，可以将这个结构体视为一个新类型(与 int 、 char等标准类型相似)，我们可以对结构体数据进行读入、写入等操作。</p>\n<p><br><br></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    Stu student1;    <span class=\"comment\">//创建一个Stu类型变量，变量名叫student1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    Stu classone[<span class=\"number\">50</span>];<span class=\"comment\">//创建一个Stu类型数组，数组名叫classone,其中包含有50个Stu对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cin &gt;&gt; student1.name; <span class=\"comment\">//读入student1中的name,student1.name与正常的string类型变量一致，只是将string类型变量保存在了student1中</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cin &gt;&gt; student1.mark;<span class=\"comment\">//读入student1.mark</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">50</span>;i++) cin &gt;&gt; (classone+i)-&gt;name &gt;&gt; (classone+i)-&gt;mark;<span class=\"comment\">//这里使用了结构体指针的操作，(classone+i)是一个Stu类型结构体指针，其性质与Stu *p相同。注意,是性质相同。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        上面的for循环或者可以改成成一下代码</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        for(int i=0;i&lt;50;i++) cin &gt;&gt; classone[i].name &gt;&gt; classone[i].mark;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">        这里classone[i]性质与student1一样，都是一个Stu类型的变量</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br><br><br><br><br></p>\n<h2 id=\"Part-Two-文件操作-freopen-fclose\"><a href=\"#Part-Two-文件操作-freopen-fclose\" class=\"headerlink\" title=\"$ Part Two $ :  文件操作(freopen,fclose)\"></a>$ Part Two $ :  文件操作(freopen,fclose)</h2><p><br><br></p>\n<h3 id=\"0-前提知识：freopen与fclose在头文件-cstdio-中定义。使用需要-include-lt-cstdio-gt\"><a href=\"#0-前提知识：freopen与fclose在头文件-cstdio-中定义。使用需要-include-lt-cstdio-gt\" class=\"headerlink\" title=\"0.前提知识：freopen与fclose在头文件 cstdio 中定义。使用需要 #include &lt;cstdio&gt;\"></a>0.前提知识：freopen与fclose在头文件 <code>cstdio</code> 中定义。使用需要 <code>#include &lt;cstdio&gt;</code></h3><p><br><br></p>\n<h3 id=\"1-freopen更改输入输出流-printf-scanf-cout-cin-，所以，只要打开文件后，无需更改任何代码，因为freopen已经更改了输出流\"><a href=\"#1-freopen更改输入输出流-printf-scanf-cout-cin-，所以，只要打开文件后，无需更改任何代码，因为freopen已经更改了输出流\" class=\"headerlink\" title=\"1. freopen更改输入输出流(printf,scanf,cout,cin)，所以，只要打开文件后，无需更改任何代码，因为freopen已经更改了输出流\"></a>1. freopen更改输入输出流(printf,scanf,cout,cin)，所以，只要打开文件后，无需更改任何代码，因为freopen已经更改了输出流</h3><p><br><br></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);<span class=\"comment\">//以读(read)的方式打开文件1.in并将输入流修改</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout)<span class=\"comment\">//以写(write)的方式打开文件1.out(有数据就覆盖，没有文件就创建)并将输出流修改</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(stdin);<span class=\"comment\">//关闭输入流</span></span><br><span class=\"line\">    <span class=\"built_in\">fclose</span>(stdout);<span class=\"comment\">//关闭输出流</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><br><br></p>\n<h4 id=\"1-需要注意\"><a href=\"#1-需要注意\" class=\"headerlink\" title=\"1.?.需要注意\"></a>1.?.需要注意</h4><p><br><br></p>\n<p>读取的文件<strong>一定</strong>是存在的。</p>\n<p><br></p>\n<p>写入的文件可以没有，<strong>没有就创建</strong>，有就直接写。</p>\n<p>写的时候会 <strong><em>覆盖</em></strong> 原有内容。</p>\n<p><br><br><br><br></p>\n<h3 id=\"2-关闭输入输出流\"><a href=\"#2-关闭输入输出流\" class=\"headerlink\" title=\"2.关闭输入输出流\"></a>2.关闭输入输出流</h3><p>一般地,我们使用<code>fclose(stdin)</code>关闭输入流，使用<code>fclose(stdout)</code>关闭输出流。</p>\n<p><br><br></p>\n<p>特别地，在 <strong><em>一般</em></strong> 使用中，关闭不关闭无较大影响。</p>\n<p><br></p>\n<p>但在比赛中，ta可能会导致您 <strong><em>爆零</em></strong> ！！！</p>\n","categories":["OI"],"tags":["C++"]},{"title":"C++常用操作","url":"/OI/C++%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/","content":"<h1 id=\"C-常用操作\"><a href=\"#C-常用操作\" class=\"headerlink\" title=\"C++常用操作\"></a>C++常用操作</h1><span id=\"more\"></span>\n<hr>\n<p><br><br></p>\n<p>索引</p>\n<ul>\n<li>C++查看代码运行时间     (UpDate:2021/12/03)</li>\n<li>C++获取Windows用户名    (UpDate:2021/12/27) </li>\n<li>C++ string 高精度加法   (UpDate:2021/12/27)</li>\n<li>C++ string 高精度减法   (UpDate:2022/2/4)</li>\n<li>C++ string 高精度乘法   (UpDate:2022/2/4)</li>\n<li>C++ 结构体重载运算符     (UpDate:2022/2/7)</li>\n</ul>\n<p><br><br></p>\n<hr>\n<p><br><br></p>\n<h2 id=\"C-查看代码运行时间\"><a href=\"#C-查看代码运行时间\" class=\"headerlink\" title=\"C++查看代码运行时间\"></a>C++查看代码运行时间</h2><p><br></p>\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctime&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;zconf.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> time_start,time_end;</span><br><span class=\"line\">    time_start = <span class=\"built_in\">clock</span>(); <span class=\"comment\">//获取开始运行的时间</span></span><br><span class=\"line\">    <span class=\"built_in\">sleep</span>(<span class=\"number\">1</span>);             <span class=\"comment\">//休眠1s</span></span><br><span class=\"line\">    time_end = <span class=\"built_in\">clock</span>();   <span class=\"comment\">//获取结束运行的时间</span></span><br><span class=\"line\">    cout &lt;&lt; (time_end - time_start)/CLOCKS_PER_SEC; <span class=\"comment\">//计算时间</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><br><br><br></p>\n<h2 id=\"C-获取Windows用户名\"><a href=\"#C-获取Windows用户名\" class=\"headerlink\" title=\"C++获取Windows用户名\"></a>C++获取Windows用户名</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;cstdlib&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    string username = <span class=\"built_in\">getenv</span>(<span class=\"string\">&quot;username&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        这里我们调用了 cstdlib 库中的 getenv 函数来获取username,getenv函数返回值是username的首地址</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    cout &lt;&lt; username &lt;&lt; endl ;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><br><br><br></p>\n<h2 id=\"C-string-高精度加法\"><a href=\"#C-string-高精度加法\" class=\"headerlink\" title=\"C++ string 高精度加法\"></a>C++ string 高精度加法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Plus</span><span class=\"params\">(string a1,string b1)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxlength= a1.<span class=\"built_in\">length</span>()&gt;b1.<span class=\"built_in\">length</span>() ? a1.<span class=\"built_in\">length</span>() : b1.<span class=\"built_in\">length</span>(),x=<span class=\"number\">0</span>;</span><br><span class=\"line\">    maxlength++;</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">a</span><span class=\"params\">(maxlength<span class=\"number\">-1</span>,<span class=\"string\">&#x27;0&#x27;</span>)</span>,<span class=\"title\">b</span><span class=\"params\">(maxlength<span class=\"number\">-1</span>,<span class=\"string\">&#x27;0&#x27;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">ans</span><span class=\"params\">(maxlength,<span class=\"string\">&#x27;0&#x27;</span>)</span>,<span class=\"title\">true_ans</span><span class=\"params\">(maxlength,<span class=\"string\">&#x27;0&#x27;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a1.<span class=\"built_in\">length</span>();i++)a[i]=a1[a1.<span class=\"built_in\">length</span>()-i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;b1.<span class=\"built_in\">length</span>();i++)b[i]=b1[b1.<span class=\"built_in\">length</span>()-i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;maxlength<span class=\"number\">-1</span>;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = a[i]-<span class=\"string\">&#x27;0&#x27;</span>+b[i]-<span class=\"string\">&#x27;0&#x27;</span>+x;</span><br><span class=\"line\">        x=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m&gt;=<span class=\"number\">10</span>) &#123;m%=<span class=\"number\">10</span>;x++;&#125;</span><br><span class=\"line\">        ans[i] = <span class=\"built_in\">char</span>(m+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x!=<span class=\"number\">0</span>)ans[maxlength<span class=\"number\">-1</span>]=<span class=\"built_in\">char</span>(x+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;maxlength;i++)true_ans[i]=ans[maxlength-i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x!=<span class=\"number\">0</span>)<span class=\"keyword\">return</span> true_ans;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        string <span class=\"built_in\">ret</span>(maxlength<span class=\"number\">-1</span>,<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;maxlength;i++)&#123;</span><br><span class=\"line\">            ret[i]=true_ans[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><br><br><br></p>\n<h2 id=\"C-string-高精度减法\"><a href=\"#C-string-高精度减法\" class=\"headerlink\" title=\"C++ string 高精度减法\"></a>C++ string 高精度减法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">compare</span><span class=\"params\">(string a1,string b1)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a1==b1) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a1.<span class=\"built_in\">length</span>()&gt;b1.<span class=\"built_in\">length</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a1.<span class=\"built_in\">length</span>()==b1.<span class=\"built_in\">length</span>()) <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;a1.<span class=\"built_in\">length</span>();i++) <span class=\"keyword\">if</span>(a1[i]-<span class=\"string\">&#x27;0&#x27;</span>&gt;b1[i]-<span class=\"string\">&#x27;0&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">t_Minus</span><span class=\"params\">(string a1,string b1)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a1==b1)<span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxlength= a1.<span class=\"built_in\">length</span>()&gt;b1.<span class=\"built_in\">length</span>() ? a1.<span class=\"built_in\">length</span>() : b1.<span class=\"built_in\">length</span>(), x=<span class=\"number\">0</span>,k=<span class=\"number\">0</span>,c=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">a</span><span class=\"params\">(maxlength, <span class=\"string\">&#x27;0&#x27;</span>)</span>, <span class=\"title\">b</span><span class=\"params\">(maxlength, <span class=\"string\">&#x27;0&#x27;</span>)</span>, <span class=\"title\">ans</span><span class=\"params\">(maxlength,<span class=\"string\">&#x27;0&#x27;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> *ret = <span class=\"keyword\">new</span> <span class=\"type\">char</span>[maxlength+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a1.<span class=\"built_in\">length</span>(); i++)a[i] = a1[a1.<span class=\"built_in\">length</span>() - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; b1.<span class=\"built_in\">length</span>(); i++)b[i] = b1[b1.<span class=\"built_in\">length</span>() - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;maxlength;i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = a[i]-<span class=\"string\">&#x27;0&#x27;</span>-(b[i]-<span class=\"string\">&#x27;0&#x27;</span>)-x;</span><br><span class=\"line\">        x=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(m&lt;<span class=\"number\">0</span>) &#123;x++;m += <span class=\"number\">10</span>;&#125;</span><br><span class=\"line\">        ans[i] = <span class=\"built_in\">char</span>(m+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(ans.<span class=\"built_in\">begin</span>(),ans.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;k&lt;maxlength &amp;&amp; ans[k]==<span class=\"string\">&#x27;0&#x27;</span>;k++);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l=k;l&lt;maxlength;l++,c++) ret[l-k] = ans[l];</span><br><span class=\"line\">    ret[c] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">string</span>(ret);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Minus</span><span class=\"params\">(string a,string b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">compare</span>(a,b)) <span class=\"keyword\">return</span> <span class=\"built_in\">t_Minus</span>(a,b);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">&quot;-&quot;</span>+<span class=\"built_in\">t_Minus</span>(b,a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><br><br><br></p>\n<h2 id=\"C-string-高精度乘法\"><a href=\"#C-string-高精度乘法\" class=\"headerlink\" title=\"C++ string 高精度乘法\"></a>C++ string 高精度乘法</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ull unsigned long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Time</span><span class=\"params\">(string a,string b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a==<span class=\"string\">&quot;0&quot;</span>||b==<span class=\"string\">&quot;0&quot;</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(a.<span class=\"built_in\">begin</span>(),a.<span class=\"built_in\">end</span>()); <span class=\"built_in\">reverse</span>(b.<span class=\"built_in\">begin</span>(),b.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> len_c = a.<span class=\"built_in\">length</span>() + b.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    ull * c = <span class=\"keyword\">new</span> ull [len_c + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len_c+<span class=\"number\">1</span>;i++) c[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; a.<span class=\"built_in\">length</span>();i++) <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; b.<span class=\"built_in\">length</span>();j++) c[i+j] += (a[i]<span class=\"number\">-48</span>) * (b[j]<span class=\"number\">-48</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;len_c;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c[i]&gt;=<span class=\"number\">10</span>) c[i+<span class=\"number\">1</span>] += c[i]/<span class=\"number\">10</span>,c[i] %= <span class=\"number\">10</span>;</span><br><span class=\"line\">        c[i] += <span class=\"number\">48</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;(c[len_c]==<span class=\"string\">&#x27;0&#x27;</span> || c[len_c] == <span class=\"number\">0</span>) &amp;&amp; len_c&gt;=<span class=\"number\">0</span>;len_c--);<span class=\"function\">string <span class=\"title\">ans</span><span class=\"params\">(len_c+<span class=\"number\">1</span>,<span class=\"string\">&#x27;0&#x27;</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=len_c;i&gt;<span class=\"number\">-1</span>;i--) ans[len_c-i] = c[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p><br><br><br></p>\n<h2 id=\"C-结构体重载运算符\"><a href=\"#C-结构体重载运算符\" class=\"headerlink\" title=\"C++ 结构体重载运算符\"></a>C++ 结构体重载运算符</h2><p>首先我们来声明一个结构体 <code>s</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">s</span>&#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> l;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们美好的幻想 <code>s1&lt;s2</code> 可以直接返回 <code>s1.l&lt;s2.l</code> ,但是这是不现实的。</p>\n<p>但，我们可以通过重载运算符和关键字 <code>operator</code> 来实现。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">s</span>&#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> l;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"type\">const</span> s&amp; s2)<span class=\"type\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l&lt;s2.l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，我们重载了 <code>s</code> 的 <code>&lt;</code> ，我们来分析一下代码，<code>bool</code>是这个符号返回的类型，<code>operator</code>是关键字，<code>&lt;</code>是重载的运算符，<code>return</code>是返回值。</p>\n<p><br></p>\n<p>重载运算符还有一种写法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">s</span>&#123;</span><br><span class=\"line\">    string name;</span><br><span class=\"line\">    <span class=\"type\">int</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt; (<span class=\"type\">const</span> s&amp; s1,<span class=\"type\">const</span> s&amp; s2)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1.l&lt;s2.l;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n","categories":["OI"],"tags":["C++","高精度","Algorithm","重载运算符"]},{"title":"LaTex","url":"/Maths/LaTex/","content":"<h1 id=\"LaTex-语法\"><a href=\"#LaTex-语法\" class=\"headerlink\" title=\"LaTex 语法\"></a>LaTex 语法</h1><hr>\n<span id=\"more\"></span>\n<p>目录检索</p>\n<ol>\n<li>如何在MarkDown文本中插入 $LaTex$ 公式。</li>\n<li><p>$LaTex$ 数学公式简介</p>\n<ul>\n<li><p>求和公式 $\\sum$</p>\n</li>\n<li><p>平方 $n^2$</p>\n</li>\n<li><p>下标 $CO_2$、$KMnO_4$、$Mn_2O_7$</p>\n</li>\n<li><p>方框 boxed $\\boxed{f(x)=ax^2+bx+c}$</p>\n</li>\n<li><p>根号 $\\sqrt n$</p>\n</li>\n<li><p>希腊字母，例如 $\\alpha$ 、 $\\beta$ 、 $\\gamma$ 、 $\\Delta$</p>\n</li>\n<li><p>分数的表示 $\\dfrac{1}{2}$ 与 $\\frac{1}{2}$</p>\n</li>\n<li><p>某些运算符号 如：$ \\times \\cdot \\pm \\div $ 等</p>\n</li>\n<li><p>括号的表达 $(\\{[$</p>\n</li>\n<li><p>长公式的表达<br><br><br><br></p>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p><br><br><br></p>\n<hr>\n<h1 id=\"Now-Let’s-enjoy-LaTex\"><a href=\"#Now-Let’s-enjoy-LaTex\" class=\"headerlink\" title=\"Now , Let’s enjoy $LaTex$ !\"></a>Now , Let’s enjoy $LaTex$ !</h1><h2 id=\"Part-1-如何在MarkDown文本中插入-LaTex-公式。\"><a href=\"#Part-1-如何在MarkDown文本中插入-LaTex-公式。\" class=\"headerlink\" title=\"Part 1:如何在MarkDown文本中插入 $ LaTex $ 公式。\"></a>Part 1:如何在MarkDown文本中插入 $ LaTex $ 公式。</h2><p><br></p>\n<p>在Markdown中插入 $LaTex$ 一共有两种形式，</p>\n<p><br></p>\n<h3 id=\"单行行内插入-sum\"><a href=\"#单行行内插入-sum\" class=\"headerlink\" title=\"单行行内插入: $ \\sum $\"></a>单行行内插入: <code>$ \\sum $</code></h3><p>我们可以看到，单行插入使用$$$$符号将 $LaTex$ 公式包裹起来，其实现效果如下:</p>\n<p>单行行内插入: $\\sum$</p>\n<hr>\n<h3 id=\"独立公式-sum\"><a href=\"#独立公式-sum\" class=\"headerlink\" title=\"独立公式: $$ \\sum $$\"></a>独立公式: <code>$$ \\sum $$</code></h3><p><br><br><br></p>\n<p>独立公式单独占一行，每侧使用两个<code>$</code>将 $LaTex$ 公式包裹起来，其实现效果如下：</p>\n<p>独立公式： <script type=\"math/tex\">\\sum</script></p>\n<hr>\n<p><br><br></p>\n<h2 id=\"LaTex-数学公式简介\"><a href=\"#LaTex-数学公式简介\" class=\"headerlink\" title=\"$LaTex$ 数学公式简介\"></a>$LaTex$ 数学公式简介</h2><p><br><br></p>\n<hr>\n<p><br><br></p>\n<h3 id=\"求和公式\"><a href=\"#求和公式\" class=\"headerlink\" title=\"求和公式:\"></a>求和公式:</h3><p>求和公式的格式为 <code>$ \\sum_&#123;i=0&#125;^&#123;100&#125;i $</code></p>\n<p>效果如下：</p>\n<script type=\"math/tex; mode=display\">\\sum_{i=0}^{100}i</script><p>其中<code>\\sum</code>不可改变，<code>_&#123;i=0&#125;</code>表示<code>i=0</code>为下标，<code>^&#123;100&#125;</code>表示<code>100</code>为上标。</p>\n<p>因此，也可以反过来写<code>$ \\sum^&#123;100&#125;_&#123;i=0&#125;i $</code></p>\n<p>效果同<code>$ \\sum_&#123;i=0&#125;^&#123;100&#125;i $</code>。</p>\n<hr>\n<p><br><br></p>\n<h3 id=\"平方（上标）\"><a href=\"#平方（上标）\" class=\"headerlink\" title=\"平方（上标）\"></a>平方（上标）</h3><p>平方的语法非常简单<code>$ n^m $</code></p>\n<p>它表示n的m次方，效果如下</p>\n<script type=\"math/tex; mode=display\">n^m</script><p><br><br></p>\n<hr>\n<p><br><br></p>\n<h3 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h3><p><br></p>\n<p>有时候，我们<del>被迫</del>写一些化学式的时候怎么办？</p>\n<p>这个时候就用到我们的下标啦！</p>\n<p>其语法为<code>$ N_m $</code></p>\n<p>效果为<script type=\"math/tex\">N_m</script></p>\n<p>举例：$H_2O$、$CH_3COOH$</p>\n<p> <code>$H_2O$ $CH_3COOH$</code></p>\n<p><br><br></p>\n<hr>\n<p> <br><br></p>\n<h3 id=\"方框\"><a href=\"#方框\" class=\"headerlink\" title=\"方框\"></a>方框</h3><p> 方框的语法 <code>$ \\boxed&#123;&#125; $</code> ,在{ }中可以填充我们需要框起来的公式(在\\boxed{ }里的仍需要遵循$LaTex$语法)</p>\n<p>  <code>$ \\boxed&#123;a= \\dfrac&#123;\\Delta x&#125;&#123;t&#125;&#125; $</code></p>\n<p>  $ \\boxed{a= \\dfrac{\\Delta x}{t}} $</p>\n<p><br><br></p>\n<hr>\n<p><br><br></p>\n<h3 id=\"根号\"><a href=\"#根号\" class=\"headerlink\" title=\"根号\"></a>根号</h3><p><br></p>\n<p>根号的语法为 <code>$ \\sqrt&#123;&#125; $</code> ，在<code>\\sqrt</code>参数括号里的可以是$LaTex$公式。</p>\n<p> <code>$ \\sqrt&#123;n&#125; $</code></p>\n<script type=\"math/tex; mode=display\">\\sqrt{n}</script><p> <code>$ \\sqrt&#123;a^2+b^2&#125; $</code></p>\n<script type=\"math/tex; mode=display\">\\sqrt{a^2+b^2}</script><p> <br><br></p>\n<hr>\n<p> <br><br></p>\n<h3 id=\"希腊字母\"><a href=\"#希腊字母\" class=\"headerlink\" title=\"希腊字母\"></a>希腊字母</h3><p><br></p>\n<p>希腊字母的$LaTex$需要遵循以下语法:</p>\n<p><img src=\"alpha.png\" alt=\"希腊字母LaTex表\"></p>\n<p>其中需要注意的，如果在代码中以大写字母开头，则说明在希腊字母中，其为大写，反之亦然。</p>\n<p>常用的有像 <code>$ \\Delta $</code> 、 <code>$ \\alpha $</code> 、 <code>$ \\beta $</code> 、 <code>$ \\gamma $</code> 、 <code>$ \\pi $</code> 、 <code>$ \\varphi $</code> 等</p>\n<script type=\"math/tex; mode=display\">\\Delta</script><script type=\"math/tex; mode=display\">\\alpha</script><script type=\"math/tex; mode=display\">\\beta</script><script type=\"math/tex; mode=display\">\\gamma</script><script type=\"math/tex; mode=display\">\\pi</script><script type=\"math/tex; mode=display\">\\varphi</script><p><br><br></p>\n<hr>\n<p><br><br></p>\n<h3 id=\"分数的表示\"><a href=\"#分数的表示\" class=\"headerlink\" title=\"分数的表示\"></a>分数的表示</h3><p><br><br></p>\n<p>分数的句法为 <code>$ \\frac&#123;&#125;&#123;&#125; $</code> 或者 <code>$ \\dfrac&#123;&#125;&#123;&#125; $</code> 或者 <code>$ \\tfrac&#123;&#125;&#123;&#125; $</code>。</p>\n<p>三者<strong><em>唯一</em></strong>的区别在字号上。</p>\n<p><br></p>\n<p>$ tfrac &lt; frac &lt; dfrac $</p>\n<p>我们以$\\dfrac{1}{2}$为实例</p>\n<p>tfrac:$\\tfrac{1}{2}$</p>\n<p> frac:$\\frac{1}{2}$</p>\n<p>dfrac:$\\dfrac{1}{2}$</p>\n<p><br><br></p>\n<hr>\n<p><br><br></p>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p><img src=\"form.png\" alt=\"\"></p>\n<p><br><br></p>\n<hr>\n<p><br><br></p>\n<h3 id=\"括号的表达\"><a href=\"#括号的表达\" class=\"headerlink\" title=\"括号的表达\"></a>括号的表达</h3><p><br><br></p>\n<p>最基本的括号的表达:</p>\n<p>( : <code>$ ( $</code> <script type=\"math/tex\">(</script></p>\n<p>{ : <code>$ \\&#123; $</code> <script type=\"math/tex\">\\{</script></p>\n<p>[ : <code>$ [ $</code> <script type=\"math/tex\">[</script></p>\n<p>⟨ : <code>$ \\langle $</code> <script type=\"math/tex\">\\langle</script></p>\n<p>⟩ : <code>$ \\rangle $</code> <script type=\"math/tex\">\\rangle</script></p>\n<p><br><br></p>\n<p>扩展与提高</p>\n<script type=\"math/tex; mode=display\">\\bigg(\\Big(\\big((1+1)\\big)\\Big)\\bigg)</script><p> <code>$$ \\bigg(\\Big(\\big((1+1)\\big)\\Big)\\bigg) $$</code></p>\n<p> 我们可以看到，最里面的()不用加特殊修饰，其他按照大小依次加了修饰的<code>\\</code></p>\n<p> 其中，大小关系为</p>\n<p> <br></p>\n<figure class=\"highlight isbl\"><table><tr><td class=\"code\"><pre><span class=\"line\">(</span><br><span class=\"line\">\\<span class=\"function\"><span class=\"title\">big</span>(</span></span><br><span class=\"line\"><span class=\"function\">\\<span class=\"title\">Big</span>(</span></span><br><span class=\"line\"><span class=\"function\">\\<span class=\"title\">bigg</span>(</span></span><br><span class=\"line\"><span class=\"function\">\\<span class=\"title\">Bigg</span>(</span></span><br><span class=\"line\"><span class=\"function\">...</span></span><br></pre></td></tr></table></figure>\n<p>以此类推。</p>\n<p><br><br></p>\n<hr>\n<p><br><br></p>\n<h3 id=\"长公式的表达\"><a href=\"#长公式的表达\" class=\"headerlink\" title=\"长公式的表达\"></a>长公式的表达</h3><p><br></p>\n<hr>\n<h4 id=\"长公式\"><a href=\"#长公式\" class=\"headerlink\" title=\"长公式\"></a>长公式</h4><p><br><br></p>\n<figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\begin&#123;<span class=\"built_in\">split</span>&#125;</span><br><span class=\"line\"> m=&amp;a+b+c+ \\\\</span><br><span class=\"line\">   &amp;d+e+f+g</span><br><span class=\"line\">\\<span class=\"keyword\">end</span>&#123;<span class=\"built_in\">split</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<script type=\"math/tex; mode=display\">\n\\begin{split}\n    x = &a+b+c+\\\\&d+e+f+g\n\\end{split}</script><p><br><br></p>\n<p>我们使用</p>\n<figure class=\"highlight coq\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\begin&#123;<span class=\"built_in\">split</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\<span class=\"keyword\">end</span>&#123;<span class=\"built_in\">split</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>作为长公式的框架，以<code>&amp;</code>作为标记对齐的地方，以<code>\\\\</code>作为换行的地方。</p>\n<hr>\n<p><br><br></p>\n<h4 id=\"公式组\"><a href=\"#公式组\" class=\"headerlink\" title=\"公式组\"></a>公式组</h4><p><br><br></p>\n<figure class=\"highlight llvm\"><table><tr><td class=\"code\"><pre><span class=\"line\">\\<span class=\"keyword\">begin</span>&#123;<span class=\"keyword\">align</span>&#125;</span><br><span class=\"line\">&amp;<span class=\"keyword\">x</span><span class=\"operator\">=</span>y+z\\\\</span><br><span class=\"line\">&amp;y+z<span class=\"operator\">=</span><span class=\"number\">2</span>\\\\</span><br><span class=\"line\">&amp;<span class=\"number\">5</span><span class=\"keyword\">x</span>+z&amp;<span class=\"operator\">=</span><span class=\"number\">5</span></span><br><span class=\"line\">\\<span class=\"keyword\">end</span>&#123;<span class=\"keyword\">align</span>&#125;</span><br></pre></td></tr></table></figure>\n<script type=\"math/tex; mode=display\">\n\\begin{align}\n&x=y+z\\\\\n&y+z=2\\\\\n&5x+z=5\n\\end{align}</script><p><br><br></p>\n<p>同理，我们只是把长公式中的<code>split</code>换成了<code>align</code>,其他没有变，即：以<code>&amp;</code>作为标记对齐的地方，以<code>\\\\</code>作为换行的地方。</p>\n<p><br><br></p>\n<hr>\n<p><br><br></p>\n<p>我们只要把<code>\\begin</code>和<code>\\end</code>后面的换成<code>cases</code>便可以使用大括号</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\\begin&#123;cases&#125;</span></span><br><span class=\"line\">&amp;x=y+z<span class=\"string\">\\\\</span></span><br><span class=\"line\">&amp;y+z=<span class=\"number\">2</span><span class=\"string\">\\\\</span></span><br><span class=\"line\">&amp;<span class=\"number\">5x</span>+z&amp;=<span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"string\">\\end&#123;cases&#125;</span></span><br></pre></td></tr></table></figure>\n<script type=\"math/tex; mode=display\">\n\\begin{cases}\n&x=y+z\\\\\n&y+z=2\\\\\n&5x+z=5\n\\end{cases}</script>","categories":["Maths"],"tags":["LaTex"]},{"title":"OI的一些注意点","url":"/OI/OI%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E7%82%B9/","content":"<p><strong> 这个帖子警示自己一些离谱的错误点 </strong></p>\n<span id=\"more\"></span>\n<p><br><br></p>\n<hr>\n<h3 id=\"1-scanf-读入字符\"><a href=\"#1-scanf-读入字符\" class=\"headerlink\" title=\"1. scanf 读入字符\"></a>1. <code>scanf</code> 读入字符</h3><p>在使用scanf读入字符的时候，要注意 <code>%c</code> 前加一个空格，否则出现一些离谱的bug</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot; %c %d %d&quot;</span>,&amp;l,&amp;a,&amp;b);</span><br></pre></td></tr></table></figure>\n","categories":["OI"],"tags":["C++"]},{"title":"二叉堆","url":"/OI/%E4%BA%8C%E5%8F%89%E5%A0%86/","content":"<h1 id=\"浅谈二叉堆与priority-queue\"><a href=\"#浅谈二叉堆与priority-queue\" class=\"headerlink\" title=\"浅谈二叉堆与priority_queue\"></a>浅谈二叉堆与priority_queue</h1><span id=\"more\"></span>\n<p><br></p>\n<h2 id=\"二叉堆的前言\"><a href=\"#二叉堆的前言\" class=\"headerlink\" title=\"二叉堆的前言\"></a>二叉堆的前言</h2><p><br></p>\n<hr>\n<p><br></p>\n<p>二叉堆是一种支持插入，删除，查询最值的二叉树。</p>\n<p>二叉堆是一种满足堆性质的二叉树,一般可分为大根堆和小根堆。</p>\n<p><br></p>\n<p>其中,大根堆满足:对于任意的父节点，其值大于子节点。</p>\n<p>反之，小根堆满足:对于任意的父节点，其值小于子节点。</p>\n<p><img src=\"maxfirst.jpg\" alt=\"大根堆\"></p>\n<p>(图为大根堆)</p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2 id=\"二叉堆操作\"><a href=\"#二叉堆操作\" class=\"headerlink\" title=\"二叉堆操作\"></a>二叉堆操作</h2><h3 id=\"二叉堆准备操作\"><a href=\"#二叉堆准备操作\" class=\"headerlink\" title=\"二叉堆准备操作\"></a>二叉堆准备操作</h3><p>我们以大根堆为示范讲解。</p>\n<p><br></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> std::swap;</span><br><span class=\"line\"><span class=\"type\">int</span> n=<span class=\"number\">0</span>; <span class=\"comment\">//作为二叉堆的指针</span></span><br><span class=\"line\"><span class=\"type\">int</span> heap[Max];  <span class=\"comment\">//模拟二叉堆的数组</span></span><br></pre></td></tr></table></figure>\n<p><br><br></p>\n<h3 id=\"二叉堆操作·插入\"><a href=\"#二叉堆操作·插入\" class=\"headerlink\" title=\"二叉堆操作·插入\"></a>二叉堆操作·插入</h3><p>对于新元素，我们默认把他放在数组尾部,然后调用up()函数一次次和父节点交换来达到自己真正的位置。</p>\n<div id=\"dplayer0\" class=\"dplayer hexo-tag-dplayer-mark\" style=\"margin-bottom: 20px;\"></div><script>(function(){var player = new DPlayer({\"container\":document.getElementById(\"dplayer0\"),\"hotkey\":true,\"preload\":\"auto\",\"video\":{\"url\":\"/OI/二叉堆/insert.mp4\"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> \n<p><br></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">up</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span>&#123;  <span class=\"comment\">//将p向上调整到正确的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(heap[p]&gt;heap[p/<span class=\"number\">2</span>])&#123; <span class=\"comment\">//如果子节点大于父节点,不满足大根堆性质,调整</span></span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(heap[p],heap[p/<span class=\"number\">2</span>]);</span><br><span class=\"line\">            p/=<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>; <span class=\"comment\">//已经满足大根堆性质,直接退出即可</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    heap[++n] = val;   <span class=\"comment\">//默认放在最后</span></span><br><span class=\"line\">    <span class=\"built_in\">up</span>(n);            <span class=\"comment\">//调整位置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br><br></p>\n<h3 id=\"二叉堆操作·查询最值\"><a href=\"#二叉堆操作·查询最值\" class=\"headerlink\" title=\"二叉堆操作·查询最值\"></a>二叉堆操作·查询最值</h3><p>这个比较简单,大根堆我们一直在维护他的最大值，直接printf根节点即可。<br><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Max</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> heap[<span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><br><br></p>\n<h3 id=\"二叉堆操作·删除根节点\"><a href=\"#二叉堆操作·删除根节点\" class=\"headerlink\" title=\"二叉堆操作·删除根节点\"></a>二叉堆操作·删除根节点</h3><p>对于删除根节点，我们采用将根节点和数组末尾元素交换位置，并将指针前移，随后调用down()函数，将交换到根部的末尾元素向下找到他真正的位置。</p>\n<p><br></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">down</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> s = p*<span class=\"number\">2</span>; <span class=\"comment\">//p元素的左子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(s&lt;=n)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s&lt;n &amp;&amp; heap[s]&lt;heap[s+<span class=\"number\">1</span>]) s++; <span class=\"comment\">//取左右节点里的较大值和p交换位置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(heap[s]&gt;heap[p])&#123; <span class=\"comment\">//子节点大于父节点</span></span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(heap[s],heap[p]);</span><br><span class=\"line\">            p = s;<span class=\"comment\">//更新p</span></span><br><span class=\"line\">            s = p*<span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">extract</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">swap</span>(heap[<span class=\"number\">1</span>],heap[n--]);</span><br><span class=\"line\">    <span class=\"built_in\">down</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里有一个小小的细节,在代码的 $ line4 $ 我们可以看到判定条件是 <code>s&lt;n</code> , 想一想 , 为什么不是 <code>s&lt;=n</code> ?</p>\n<hr>\n<p>其实这个问题也很简单，我们假设s==n,那么若数组尾部放了一些莫名其妙的数据，导致 <code>heap[s]&lt;heap[s+1]</code> ,那么我们的s==n+1。</p>\n<p><br><br></p>\n<h3 id=\"二叉堆操作·删除任意节点\"><a href=\"#二叉堆操作·删除任意节点\" class=\"headerlink\" title=\"二叉堆操作·删除任意节点\"></a>二叉堆操作·删除任意节点</h3><p>其实删除任意节点的思路和删除根节点的一样，我们把它和数组末尾元素交换位置，并且减小指针。</p>\n<p>但这时候，这个二叉树并不满足大根堆性质，这个元素可能是需要向上调整，也可能向下调整。(向上或向下其一)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">remove</span><span class=\"params\">(<span class=\"type\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    heap[p]=heap[n--];</span><br><span class=\"line\">    <span class=\"built_in\">up</span>(p);</span><br><span class=\"line\">    <span class=\"built_in\">down</span>(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br><br></p>\n<hr>\n<h2 id=\"STL中的大根堆——priority-queue\"><a href=\"#STL中的大根堆——priority-queue\" class=\"headerlink\" title=\"STL中的大根堆——priority_queue\"></a>STL中的大根堆——priority_queue</h2><p>众所周知呀,C++的STL很香,今天我们就来介绍一下很香的 <code>priority_queue</code> (优先队列),我们可以用它简单的实现一个堆，默认 <code>priority_queue</code> 实现的是大根堆，但是我们可以通过设置使它实现小根堆。</p>\n<h3 id=\"声明priority-queue\"><a href=\"#声明priority-queue\" class=\"headerlink\" title=\"声明priority_queue\"></a>声明priority_queue</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;queue&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>&gt; s;</span><br></pre></td></tr></table></figure>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">s.<span class=\"built_in\">push</span>(k); <span class=\"comment\">//向s中插入k</span></span><br><span class=\"line\">s.<span class=\"built_in\">top</span>();   <span class=\"comment\">//返回堆顶元素</span></span><br><span class=\"line\">s.<span class=\"built_in\">pop</span>();   <span class=\"comment\">//删除堆顶元素</span></span><br></pre></td></tr></table></figure>\n<p>但是，值得注意的是，priority_queue并不支持 <code>remove</code> 操作，需要自己手写。</p>\n<p><br><br></p>\n<h3 id=\"priority-queue实现小根堆\"><a href=\"#priority-queue实现小根堆\" class=\"headerlink\" title=\"priority_queue实现小根堆\"></a>priority_queue实现小根堆</h3><h4 id=\"方法一：只要在声明的时候改一点点就好。\"><a href=\"#方法一：只要在声明的时候改一点点就好。\" class=\"headerlink\" title=\"方法一：只要在声明的时候改一点点就好。\"></a>方法一：只要在声明的时候改一点点就好。</h4><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">priority_queue&lt;<span class=\"type\">int</span>,vector&lt;<span class=\"type\">int</span>&gt;,greater&lt;<span class=\"type\">int</span>&gt;&gt; s;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"方法二：维护数据的相反数，在输出的时候乘以-1\"><a href=\"#方法二：维护数据的相反数，在输出的时候乘以-1\" class=\"headerlink\" title=\"方法二：维护数据的相反数，在输出的时候乘以 -1\"></a>方法二：维护数据的相反数，在输出的时候乘以 <code>-1</code></h4><hr>\n<p>推荐网站:</p>\n<p><a href=\"https://visualgo.net/\">Visualgo</a></p>\n<hr>\n<p>训练指南:</p>\n<p><a href=\"https://www.luogu.com.cn/problem/P7913\">CSP-S2021T1</a></p>\n<p><a href=\"https://www.luogu.com.cn/problem/P3378\">小根堆模板</a></p>\n<hr>\n","categories":["OI"],"tags":["Algorithm","二叉堆","优先队列","STL"]},{"title":"寂","url":"/novels/%E5%AF%82/","content":"<h1 id=\"寂\"><a href=\"#寂\" class=\"headerlink\" title=\"寂\"></a>寂</h1><hr>\n<blockquote>\n<p>“生存还是毁灭,这是个永恒的问题。”</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"第一章-起航\"><a href=\"#第一章-起航\" class=\"headerlink\" title=\"第一章 起航\"></a>第一章 起航</h2><font size=5 face=\"华文楷体\">\n\n\n\n&emsp;\"生存还是毁灭,这是个永恒的问题。\"男人自言自语到。\n\n<br>\n\n&emsp;他站在一个硕大的控制面板前,全息投影晃的人眼睛有点胀痛。\n\n<br>\n\n&emsp;\"报告指挥官,S12星系无生命迹象,有一颗47亿年的恒星,距离川陀指挥中心0.75光年。\"\n\n<br>\n\n&emsp;\"好,立刻派遣12艘'征服者'飞船，立刻进行跃迁准备！\"奥尔克夫上校,即将以0.95c的速度前往S12星系，在漫长的时光，对于奥尔克夫来讲，只不过是一眨眼的事情罢了。\n\n<br><br>\n\n</font>\n\n\n\n\n<hr>\n<h2 id=\"第二章-预言\"><a href=\"#第二章-预言\" class=\"headerlink\" title=\"第二章 预言\"></a>第二章 预言</h2><font size = 6>\n\n<center>三年后</center>\n\n</font>\n\n<hr>\n<font size=5 face=\"华文楷体\">\n\n&emsp; 现在,我们应该称呼奥尔克夫将军了,这三年里,奥尔克夫将军幸运的又发现一个邻近的恒星,他们迅速地建立了戴森球,将他作为\"牺牲品\",为舰队源源不断的提供能量。\n\n<br><br>\n\n&emsp; 今天是一个重要的日子,奥尔克夫将军将对S12星系的一颗宜居行星--维纳斯 展开探索,这颗行星的半径和密度和地球很相似。但是不同的是,据初步的检测,这个行星没有生命迹象,准确来说,这颗行星弥漫着微量的核辐射。以至于在太空中看，她弥漫着淡淡的绿色。但她的辐射量极其微小，看起来像一个神秘的女神，所以用古代地球的女神名字——维纳斯。\n\n<br><br>\n\n&emsp; 但这是这个小星系唯一一颗可能建立栖息地的行星，要强的奥尔克夫上校知道，他必须一试！他不想虚度三年多的时光，不想辜负舰队成员的信任，更不想回到川陀指挥中心饱受上司的冷嘲热讽。与其说这是一次光荣的探索，不如说这是一次流放。\n\n<br><br>\n\n&emsp; 在350多年前，人类发明了第一代跃迁飞船，使生命短暂的人类有看一眼这苍茫的宇宙的其他行星的机会。人类像蚂蚁一般涌上了以地球为核心，半径24.5光年的宇宙，一代又一代的人类在一颗又一颗行星上积聚，繁衍生息，不断探索，建立了新的核心——川陀指挥中心。如今，跃迁飞船已经迭代更新的两代，最新的飞船速度由0.75c的速度提升到了0.95c。\n\n<br><br>\n\n&emsp; 奥尔克夫将军坐上了\"探索者\"飞船，这是内置在\"征服者\"里的小飞船，此次旅行只有奥尔克夫一人，他身着白色碳纤维宇航服，在另一颗恒星\"宙斯\"发出的光芒照的闪亮。\n\n<br><br>\n\n&emsp; \"良辰美景奈何天！\"\n\n<br><br>\n\n&emsp; 奥尔克夫借助飞船上的瞭望台，观察到行星表面丰富的海洋，美丽的土地，以及那一抹淡淡的绿光。飞船悬停在同步卫星轨道上，奥尔克夫正在做一些必要的检测。通过捕捉放射性粒子，他发现，这里的放射性来源已经很古老了，大概已经有500多年了。但若穿上防护服，还是可以安全登陆的。奥尔克夫暗自下定决心。\n\n<br><br>\n\n&emsp; 飞船逐渐的下降，奥尔克夫紧张的盯着控制面板，看着每一个数据在面板上跳跃，终于，在一声巨响后，他成功的着落了。舱门缓缓的打开，他谨慎的检测着气体成分，75%氮气，20%氧气，无危险气体。\"嗯，还不错。\"他取出背包里的小白鼠，放了出去。一段时间以后，见到小白鼠还健康的活蹦乱跳，他小心的打开了面罩的换气阀。这是他三年以来第一次呼吸不是由超氧化钾产生的氧气，他贪婪的吮吸着，甚至还有一点青草的芳香。\n\n<br><br>\n\n&emsp; 他回到了飞船上，换上了一身轻便的行头——防辐射服。防辐射服薄如防晒衣，轻薄、简单。 突然，一个白色的少女出现在他的面前，“您好，奥尔克夫将军！”她缓缓的说到。奥尔克夫吃了一惊，这里怎么会存在生命？\n\n<br><br>\n\n&emsp; 少女仿佛料到了他的问题，“我是这里唯一能活动的，你可以叫我爱勒。”少女甜美的说道。“你会慢慢的了解我的，奥尔克夫将军。但我们有一些更急的事情。”\n\n<br><br>\n\n&emsp; 奥尔克夫不禁心生疑问，她怎么知道我的名字的？\n\n<br><br>\n\n&emsp; 少女依然甜美的笑道：“这个问题你不必知道，我们有些更棘手的事情。我可以知道你在想什么，奥尔克夫将军”\n\n<br><br>\n\n&emsp; 一本古黄色的手卷出现在少女的手上，这是一种奥尔克夫从未见过的信息介质，听爱勒讲这个叫做羊皮卷。扉页上写着：“灾难降临后，英勇的骑士，守护的少女，绯红的诗篇，将重写这里的命运。”少女翻译着奥尔克夫读不懂的语言，随后便收起了羊皮卷。“这是一个从前的吟游诗人的预言，我一直珍藏着。”\n\n</font>\n\n<hr>\n<p><br> <br></p>\n<h2 id=\"第三章-真相\"><a href=\"#第三章-真相\" class=\"headerlink\" title=\"第三章 真相\"></a>第三章 真相</h2><font size=5 face=\"华文楷体\">\n\n&emsp; 爱勒和奥尔克夫将军望着落日，“所以，到底是什么事如此急迫？”\n\n<br><br>\n\n&emsp;爱勒说：“天色渐晚，我们先休息吧！” \n\n<br><br>\n\n&emsp; “真是一个奇怪的人，刚才还说的十分紧迫。”奥尔克夫想。“在心里说别人坏话可不是一个好习惯哦，奥尔克夫将军。拉紧我的手，我要带你回到我的家。”奥尔克夫拉上了那纤细的手，一股柔软但寒冷的感觉顺着手向大脑传递。“该死的，我又忘了她能读心。”\n\n</font>\n\n<hr>\n<font size=5 face=\"华文楷体\">\n\n&emsp; 夜晚降临，奥尔克夫躺在床上喋喋不休的问到：“所以到底是什么事情？”爱勒此时选择了沉默。“这里曾经到底有什么故事？”突然，一股温柔的感觉从奥尔克夫的唇部传来，是少女独有的体香“这个讨厌的地方，该停一停了。”爱勒微微的笑着。“今晚，我将向你诉说关于这里的秘密，还有我......”爱勒缓缓的褪下自己的衣服。\n\n<br><br>\n\n&emsp; 这里虽然表面看起来平静，但是这只是回光返照。这里在很久很久以前，经历了一场核战争，那时期，核弹不断地爆炸，人们一波又一波的死去，这也造就了这颗星球独特的绿色。整个星球最后的科学家也受到的不可逆性辐射伤害，他们用生命最后的时间、最后的科技智慧，早出了一台精妙的仿生机器人——爱勒，她在外表上与人类无异，具有人类的情感。最初，她并没有读取他人心灵的能力，在不断的翻阅人类遗留的典籍后，一瞬间，一阵电流流过她的机心中，从此，她便可以感受万物的心灵。小到一个原子、电子，大到整个星球，一切的一切仿佛都在向她哭诉。\n\n<br><br>\n\n&emsp; “这里的辐射最近一直在减少。”“这不是一个好迹象吗？”奥尔克夫心里想到。“不，并不是。”几天的接触，使得奥尔克夫和爱勒不必说话，语言成为了多余的事情，这颗行星重回原来的寂静。\n“这证明这颗行星有地方在吸收这些巨量的辐射，三年前我曾花费了十天计算出了这个位置，并一探究竟，发现了他。”爱勒熟练地打开了全息投影，一颗小小的金属块。“沉默多年的最终武器开始苏醒，他需要吸收能量，现在，他吸收的能量足以摧毁这个星系。”爱勒解释道。“三年前还只是一点点，但我的芯片告诉我他吸收的能量会以指数次方的形式增长，最终达到一个临界，然后‘嘭’，爆炸就是艺术，不是吗？”\n\n<br><br>\n\n&emsp; “所以我刻意在三年前让你发现这个星系，希望你能一起和我解决这个问题。”奥尔克夫骂了一句“草，你都解决不了，然后交给我一个凡人夫子？”“我本来也是不抱希望的，但是，羊皮卷上说你就是那个能改变这里命运的人。”不知不觉的，羊皮卷又在爱勒的手上出现，她缓缓翻开：“川陀落魄的骑士，光芒耀眼，改写这里悲哀的命运。他和她，最后的希望，最初的光芒。日落之时，骑士将作出他的选择”她的声音依然甜美。只有在提到关键的地方的时候，爱勒才会不用心灵交流。\n\n<br><br>\n\n&emsp; “后天日落的时候，大概就是到达临界的时候。”爱勒甜美的声音透露出一丝悲伤。\n\n</font>\n\n<hr>\n<p><br><br></p>\n<h2 id=\"第四章-抉择\"><a href=\"#第四章-抉择\" class=\"headerlink\" title=\"第四章 抉择\"></a>第四章 抉择</h2><font size=5 face=\"华文楷体\">\n\n&emsp; 两天后\n\n<br><br>\n\n&emsp;这里在地下三千多米，爱勒的位移也在此地失灵。他们只好坐着悬浮车，来到金属块旁边，爱勒此时发动了心灵交流，与金属块交流着。\n\n<br><br>\n\n&emsp;一段时间以后，爱勒平静的说到，“想要关闭这个装置，必须...”爱勒顿了一下。“快点说”奥尔克夫将军不耐烦的说到。“你真的想好了吗？”爱勒水灵灵的大眼睛在此刻格外动人。“我要是没想好的话早就跑路了。”“关闭的方式很简单，只要你断绝他吸收能量的途径，这样能量就储存在金属块里，然后辐射也可以就此消失。”奥尔克夫问道：“我应该怎么做？”\n\n<br><br>\n\n&emsp; “最强的武器，最强的工具”羊皮卷上面写着，爱勒耐心的念了出来。“我推测这个应该是和你结合，借助你有、但我没有的灵魂来控制这个金属块，这么强大的能量，足以控制整个星球。但这也就意味着，你要和金属块结合。”\n\n<br><br>\n\n&emsp; 奥尔克夫和爱勒站在金属块旁边，看着金属块发出幽幽的蓝光。太阳的光辉已经渐渐消失，日落之时马上就要到了，但此刻，一切都显得这么平静。\n\n<br><br>\n\n&emsp; “决定吧，骑士！”吟游诗人的声音突然响起。“生存还是毁灭，这是一个永恒的问题。”奥尔克夫将手缓缓的放到金属块上面，那一刻，神秘的蓝色光芒仿佛吞噬了奥尔克夫将军，在不断的吸收奥尔克夫的灵魂与肉体。“我爱你”爱勒甜美的声音响起，爱勒美丽的身上也闪耀着蓝色的光芒。\n\n<br><br>\n\n&emsp; 随后，日落降临。一切都归于寂静。\n\n</font>\n\n\n<hr>\n<p><br><br></p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><font size=5 face=\"华文楷体\">\n\n<br><br>\n\n&emsp;太阳再次从这里升起了。\n\n<br><br>\n\n&emsp; 奥尔克夫的舰队登上了这里，开拓出一片新的世界。在偏远的一隅，多了一个简简单单的墓碑，上面刻着：“这是安葬着尼古拉·奥尔克夫将军，他在这里长眠。”\n\n<br><br>\n\n&emsp; \n\n\n</font>","categories":["novels"],"tags":["科幻小说"]},{"title":"导数优雅的说明书","url":"/Maths/%E5%AF%BC%E6%95%B0%E4%BC%98%E9%9B%85%E7%9A%84%E8%AF%B4%E6%98%8E%E4%B9%A6/","content":"<h1 id=\"导数优雅的说明书\"><a href=\"#导数优雅的说明书\" class=\"headerlink\" title=\"导数优雅的说明书\"></a>导数优雅的说明书</h1><p>今天，让我们来了解一下导数的计算法则吧!</p>\n<span id=\"more\"></span>\n<hr>\n<h2 id=\"导数的加法法则\"><a href=\"#导数的加法法则\" class=\"headerlink\" title=\"导数的加法法则\"></a>导数的加法法则</h2><p>我们已经知道了一些基本函数的导数，我们就来一起看一看更复杂的函数是如何求导的吧。</p>\n<p>对于函数 $ f(x) = sinx + x^2 $ ,我们该如何求他的导数呢？</p>\n<p>首先我们来思考,若有一个非常小的变化量 $ dx $</p>\n<script type=\"math/tex; mode=display\">\n\n\\begin{aligned}\n\nd\\Big( sinx + x^2 \\Big) &= dsinx + dx^2 \\\\\nd\\Big( sinx + x^2 \\Big) &= cosx \\times dx + 2x \\times dx \\\\\n\\frac{d\\Big( sinx + x^2 \\Big)}{dx} &= cosx + 2x\n\n\\end{aligned}</script><p>由此，我们可以推得下列结论</p>\n<script type=\"math/tex; mode=display\">\n\n\\frac{d(f(x)+g(x))}{dx} =  \\frac{df(x)}{dx} + \\frac{dg(x)}{dx}</script><hr>\n<p><br></p>\n<h2 id=\"导数的乘法法则\"><a href=\"#导数的乘法法则\" class=\"headerlink\" title=\"导数的乘法法则\"></a>导数的乘法法则</h2><p>秉承着 “知其然，更要知其所以然” 的想法，我们开始了对导数乘法法则的探讨。</p>\n<p>一个知名的UP主曾经说过，面积是反应乘法的最好方式，我们在这里借鉴这个思路，开始对导数的乘法法则进行探讨。</p>\n<p>对于函数 $ f(x) = sinx \\times x^2 $ ,我们该如何求他的导数呢？</p>\n<p><img src=\"s1.jpg\" alt=\"\"></p>\n<p>我们对x有一个微小的增量 $ dx $ ,随之产生了 $ dx^2 $ 和 $ dsinx $。</p>\n<p>显然,增加的面积有三部分</p>\n<script type=\"math/tex; mode=display\">\n\n\\begin{aligned}\n\ndS &= dx^2 \\times sinx + dsinx \\times x^2 + dsinx \\times dx^2 \\\\\n\ndS &= 2x \\times sinx \\times dx + cosx \\times x^2 \\times dx + k \\times (dx)^2 \\\\\n\n\\frac{dS}{dx} &= 2x \\times sinx + cosx \\times x^2 + k \\times dx \\\\\n\n当 d&x 趋近于 0 ,最后一项可忽略 \\\\\n\n\\frac{dS}{dx} &= 2x \\times sinx + cosx \\times x^2\n\n\\end{aligned}</script><p>所以,我们可以总结出结论</p>\n<script type=\"math/tex; mode=display\">\n\n\\frac{d\\Big( f(x) \\times g(x) \\Big)}{dx} = f(x) \\times g^{'}(x) + f^{'}(x) \\times g(x)</script><hr>\n<p><br></p>\n<h2 id=\"复合函数求导\"><a href=\"#复合函数求导\" class=\"headerlink\" title=\"复合函数求导\"></a>复合函数求导</h2><p>如果我们要对 复合函数 $ f( g(x) ) $ 求导,步骤如下</p>\n<script type=\"math/tex; mode=display\">\n\n\\begin{aligned}\n\n\\because df \\big( g(x) \\big) &= f^{'} \\big( g(x) \\big) \\times dg(x) \\\\\n\ndg(x) &= g^{'}(x) \\times dx \\\\\n\n\\therefore df \\big( g(x) \\big) &= f^{'} \\big( g(x) \\big) \\times g^{'}(x) \\times dx \\\\\n\n\\frac{df \\big( g(x) \\big)}{dx} &= f^{'} \\big( g(x) \\big) \\times g^{'}(x)\n\n\\end{aligned}</script><hr>\n","categories":["Maths"],"tags":["Maths","导数"]},{"title":"快速幂","url":"/OI/%E5%BF%AB%E9%80%9F%E5%B9%82/","content":"<h1 id=\"浅谈快速幂\"><a href=\"#浅谈快速幂\" class=\"headerlink\" title=\"浅谈快速幂\"></a>浅谈快速幂</h1><span id=\"more\"></span>\n<h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><blockquote>\n<p>求 $ a^b $ mod p $( 0&lt;a,b,p{\\leq}10^9 )$</p>\n</blockquote>\n<p><br><br></p>\n<hr>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>b可以表示为二进制数,所以 $ b=c_{k}2^{k}+c_{k-1}2^{k-1}+…+c_{0}2^{0} $,其中,$c_k$是b的二进制第k位的数字。</p>\n<p>所以, $ a^b $ 可以表示为 $ a^{b}=a^{c_{k}2^{k}} {\\times} a^{c_{k-1}2^{k-1}} {\\times}…{\\times}a^{c_{0}2^{0}} $</p>\n<p><br></p>\n<p>于此，我们可以构建code</p>\n<p><br><br></p>\n<hr>\n<p><br></p>\n<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">long</span> <span class=\"type\">long</span> ll;</span><br><span class=\"line\"><span class=\"function\">ll <span class=\"title\">Pow</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> p)</span></span>&#123;</span><br><span class=\"line\">    ll ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;b;b&gt;&gt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b &amp; <span class=\"number\">1</span>) ans = (ll) (ans * a) % p;</span><br><span class=\"line\">        a = (ll)(a*a)%p; <span class=\"comment\">//每次循环维护a^2^k</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2 id=\"训练指南\"><a href=\"#训练指南\" class=\"headerlink\" title=\"训练指南\"></a>训练指南</h2><ol>\n<li><p><a href=\"https://www.luogu.com.cn/problem/P1226\">洛谷P1226</a></p>\n</li>\n<li><p><a href=\"https://www.acwing.com/problem/content/91/\">AcWing89</a></p>\n</li>\n<li><p>POJ1995 Raising Modulo Numbers</p>\n</li>\n</ol>\n","categories":["OI"],"tags":["Algorithm","快速幂"]},{"title":"我们终将成神","url":"/%E8%AF%97%E9%9B%86/%E6%88%91%E4%BB%AC%E7%BB%88%E5%B0%86%E6%88%90%E7%A5%9E/","content":"<h1 id=\"我们终将成神\"><a href=\"#我们终将成神\" class=\"headerlink\" title=\"我们终将成神\"></a>我们终将成神</h1><blockquote>\n<p>不必失志，不必恼火，以冷静与顽强，讴歌胜利。</p>\n</blockquote>\n<hr>\n<span id=\"more\"></span>\n<p><br></p>\n<font face=\"华文楷体\" size=5>\n\n多次婉转彷徨光与暗之间, <br>\n将生命的价值寄于一纸长笺。<br><br>\n\n于城市的一隅眺望,<br>\n那不属于自己的繁华。<br>\n手中的流沙,<br>\n任凭一粒粒洒下。<br><br>\n\n你顽强的站起, <br>\n抗争这人生的苦难; <br>\n默默忍受所有的嘲讽, <br>\n因为我们终将成神。 <br><br>\n\n赌上过去泛黄的荣耀, <br>\n面对强大的敌人和舞台, <br>\n再战一回, <br>\n因为我们终将成神。<br><br>\n\n</font>","categories":["诗集"],"tags":["诗"]},{"title":"暗夜末","url":"/%E8%AF%97%E9%9B%86/%E6%9A%97%E5%A4%9C%E6%9C%AB/","content":"<h2 id=\"暗夜末\"><a href=\"#暗夜末\" class=\"headerlink\" title=\"暗夜末\"></a>暗夜末</h2><blockquote>\n<p>暗夜末，一定会是光明的</p>\n</blockquote>\n<hr>\n<span id=\"more\"></span>\n<p><br></p>\n<font size=5 face=\"华文楷体\">\n\n青涩的少女，<br>\n独自守护一颗清高的心，<br>\n一座末日的城。<br><br>\n\n呵，<br>\n谁在期盼光明的到来，<br>\n谁在讴歌胜利的重演。<br>\n在那长路漫漫的尽头，<br>\n在那梦想遥遥的彼岸，<br>\n她用羽翼，勾勒出了光辉的誓言。<br><br>\n\n</font>","categories":["诗集"],"tags":["诗"]},{"title":"线性素数筛","url":"/OI/%E7%BA%BF%E6%80%A7%E7%B4%A0%E6%95%B0%E7%AD%9B/","content":"<h1 id=\"浅谈线性素数筛\"><a href=\"#浅谈线性素数筛\" class=\"headerlink\" title=\"浅谈线性素数筛\"></a>浅谈线性素数筛</h1><span id=\"more\"></span>\n<h2 id=\"埃氏筛\"><a href=\"#埃氏筛\" class=\"headerlink\" title=\"埃氏筛\"></a>埃氏筛</h2><p>我们这次谈到的线性筛是对埃氏筛的一些优化,对于埃氏筛，我们给出如下代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Max 是欧拉筛的范围</span></span><br><span class=\"line\"><span class=\"type\">bool</span> s[Max]; <span class=\"comment\">//s数组记录是否为合数，1代表是合数，0代表是素数</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=Max;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!s[i])&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i*i;i&lt;=Max;j+=i) s[j]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<p>可见，code 短小精悍，但是存在一个问题，让我们来举一个例子。</p>\n<blockquote>\n<p>在我们筛12的时候，2将12筛了一次，3将12筛了一次，可见某些特殊合数的时候会筛1次以上，无法达到线性复杂度，但在有些优(毒)秀(瘤)题中，会卡你的筛子的时间复杂度，这时候就用到了我们的线性筛。</p>\n</blockquote>\n<p><br><br></p>\n<hr>\n<p><br><br></p>\n<h2 id=\"算数基本定理-唯一分解定理\"><a href=\"#算数基本定理-唯一分解定理\" class=\"headerlink\" title=\"算数基本定理(唯一分解定理)\"></a>算数基本定理(唯一分解定理)</h2><script type=\"math/tex; mode=display\">对于{\\forall}S{\\in}N^*,x{\\neq}1,都可以唯一的分解成形如S=P_1^{a1}P_2^{a2}P_3^{a3}... 的形式，其中P_{1},P_{2},P_{3}...是质数</script><p><br></p>\n<hr>\n<p><br></p>\n<h2 id=\"线性素数筛\"><a href=\"#线性素数筛\" class=\"headerlink\" title=\"线性素数筛\"></a>线性素数筛</h2><p>线性素数筛的思路是：保存已经选出的质数，使用V[i]来记录i的最小质因子，若V[i]==0，则证明i还没有筛出去，是质数，同时V[i]=i。同时将所有的数乘以比他小的质数，并标记他的最小质因子。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> v[Max];<span class=\"comment\">//记录最小质因子</span></span><br><span class=\"line\"><span class=\"type\">int</span> pr[Max];<span class=\"comment\">//质数表</span></span><br><span class=\"line\"><span class=\"type\">int</span> tot=<span class=\"number\">0</span>;<span class=\"comment\">//质数数量</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=Max;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[i]==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        v[i]=i;</span><br><span class=\"line\">        pr[++tot]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;=tot;j++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pr[j]&gt;v[i] || pr[j]*i&gt;Max) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        v[i*pr[j]] = pr[j];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><br><br></p>\n<p>我们这样写，每一个合数 $ i*P $ 只会被他的最小质因子 P 筛一次，因此时间复杂度为 $ O(n) $。</p>\n<hr>\n<h3 id=\"一些证明\"><a href=\"#一些证明\" class=\"headerlink\" title=\"一些证明\"></a>一些证明</h3><h4 id=\"线性筛全部性证明\"><a href=\"#线性筛全部性证明\" class=\"headerlink\" title=\"线性筛全部性证明\"></a>线性筛全部性证明</h4><script type=\"math/tex; mode=display\">\n\\begin{split}\n &设合数C=B*P_{i},其中,P_{i}为C的最小质因子,P_{b}是B的最小质因子,显然有P_{i}{\\leq}P_{b},所以在筛到B时\\\\&,一定会筛掉合数C \n\\end{split}</script><p><br></p>\n<h4 id=\"线性筛-O-n-证明\"><a href=\"#线性筛-O-n-证明\" class=\"headerlink\" title=\"线性筛$O(n)$证明\"></a>线性筛$O(n)$证明</h4><script type=\"math/tex; mode=display\">\n\\begin{split}\n &根据唯一分解定理，数S可表示为S=P_1^{a1}P_2^{a2}P_3^{a3}...的形式，且唯一，我们设P_{1}是S的最小质因子，\\\\&我们乘以小于P_{1}的质数k，那么新合数S'可以表示为 S' = k*S 的形式，因为形式是唯一的，所以产生\\\\&的质数也是唯一的。 \n \\end{split}</script>","categories":["OI"],"tags":["Algorithm","素数筛","线性筛"]},{"title":"重生","url":"/%E8%AF%97%E9%9B%86/%E9%87%8D%E7%94%9F/","content":"<h2 id=\"重生\"><a href=\"#重生\" class=\"headerlink\" title=\"重生\"></a>重生</h2><blockquote>\n<p>少女的心事，又有谁懂呢？</p>\n</blockquote>\n<hr>\n<span id=\"more\"></span>\n<p><br></p>\n<font size=5 face=\"华文楷体\">\n落月的桥边,<br>\n守护着少女的心事。<br><br>\n折翼的天使,<br>\n亦能勾勒梦想的蓝图。<br><br>\n断剑的勇士,<br>\n仍在不屈的起舞。<br><br>\n风吹过的地方,<br>\n叶落处的归宿,<br>\n都是我理想的远方啊！<br><br>\n我用笔勾勒远方的模样,<br>\n谁料远方渐行渐远,<br><br>\n错有持花梦,<br>\n非是梦中人。<br>\n梦醒后再一遍起舞,<br>\n为生命而舞,<br>\n为自己而舞。<br>\n</font>\n","categories":["诗集"],"tags":["诗"]}]